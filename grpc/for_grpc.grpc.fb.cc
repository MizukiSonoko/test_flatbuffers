// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: for_grpc

#include "for_grpc_generated.h"
#include "for_grpc.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace sample {

static const char* SampleEndpoint_method_names[] = {
  "/sample.SampleEndpoint/Port",
};

std::unique_ptr< SampleEndpoint::Stub> SampleEndpoint::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SampleEndpoint::Stub> stub(new SampleEndpoint::Stub(channel));
  return stub;
}

SampleEndpoint::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Port_(SampleEndpoint_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status SampleEndpoint::Stub::Port(::grpc::ClientContext* context, const flatbuffers::BufferRef<Request>& request, flatbuffers::BufferRef<Response>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Port_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>* SampleEndpoint::Stub::AsyncPortRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Request>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Response>>(channel_.get(), cq, rpcmethod_Port_, context, request);
}

SampleEndpoint::Service::Service() {
  (void)SampleEndpoint_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      SampleEndpoint_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SampleEndpoint::Service, flatbuffers::BufferRef<Request>, flatbuffers::BufferRef<Response>>(
          std::mem_fn(&SampleEndpoint::Service::Port), this)));
}

SampleEndpoint::Service::~Service() {
}

::grpc::Status SampleEndpoint::Service::Port(::grpc::ServerContext* context, const flatbuffers::BufferRef<Request>* request, flatbuffers::BufferRef<Response>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sample

