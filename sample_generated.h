// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace sample {

struct Object1;
struct Object1T;

struct Object2;
struct Object2T;

struct Object3;
struct Object3T;

struct Wrapper1;
struct Wrapper1T;

struct Wrapper2;
struct Wrapper2T;

struct Wrapper3;
struct Wrapper3T;

struct SampleRoot;
struct SampleRootT;

struct Response;
struct ResponseT;

enum Object {
  Object_NONE = 0,
  Object_Object1 = 1,
  Object_Object2 = 2,
  Object_Object3 = 3,
  Object_MIN = Object_NONE,
  Object_MAX = Object_Object3
};

inline const char **EnumNamesObject() {
  static const char *names[] = {
    "NONE",
    "Object1",
    "Object2",
    "Object3",
    nullptr
  };
  return names;
}

inline const char *EnumNameObject(Object e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesObject()[index];
}

template<typename T> struct ObjectTraits {
  static const Object enum_value = Object_NONE;
};

template<> struct ObjectTraits<Object1> {
  static const Object enum_value = Object_Object1;
};

template<> struct ObjectTraits<Object2> {
  static const Object enum_value = Object_Object2;
};

template<> struct ObjectTraits<Object3> {
  static const Object enum_value = Object_Object3;
};

struct ObjectUnion {
  Object type;
  flatbuffers::NativeTable *table;

  ObjectUnion() : type(Object_NONE), table(nullptr) {}
  ObjectUnion(ObjectUnion&& u):
    type(std::move(u.type)), table(std::move(u.table)) {}
  ObjectUnion(const ObjectUnion &);
  ObjectUnion &operator=(const ObjectUnion &);
  ~ObjectUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& value) {
    Reset();
    type = ObjectTraits<typename T::TableType>::enum_value;
    if (type != Object_NONE) {
      table = new T(std::forward<T>(value));
    }
  }

  static flatbuffers::NativeTable *UnPack(const void *obj, Object type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  Object1T *AsObject1() {
    return type == Object_Object1 ?
      reinterpret_cast<Object1T *>(table) : nullptr;
  }
  Object2T *AsObject2() {
    return type == Object_Object2 ?
      reinterpret_cast<Object2T *>(table) : nullptr;
  }
  Object3T *AsObject3() {
    return type == Object_Object3 ?
      reinterpret_cast<Object3T *>(table) : nullptr;
  }
};

bool VerifyObject(flatbuffers::Verifier &verifier, const void *obj, Object type);
bool VerifyObjectVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum Wrapper {
  Wrapper_NONE = 0,
  Wrapper_Wrapper1 = 1,
  Wrapper_Wrapper2 = 2,
  Wrapper_Wrapper3 = 3,
  Wrapper_MIN = Wrapper_NONE,
  Wrapper_MAX = Wrapper_Wrapper3
};

inline const char **EnumNamesWrapper() {
  static const char *names[] = {
    "NONE",
    "Wrapper1",
    "Wrapper2",
    "Wrapper3",
    nullptr
  };
  return names;
}

inline const char *EnumNameWrapper(Wrapper e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesWrapper()[index];
}

template<typename T> struct WrapperTraits {
  static const Wrapper enum_value = Wrapper_NONE;
};

template<> struct WrapperTraits<Wrapper1> {
  static const Wrapper enum_value = Wrapper_Wrapper1;
};

template<> struct WrapperTraits<Wrapper2> {
  static const Wrapper enum_value = Wrapper_Wrapper2;
};

template<> struct WrapperTraits<Wrapper3> {
  static const Wrapper enum_value = Wrapper_Wrapper3;
};

struct WrapperUnion {
  Wrapper type;
  flatbuffers::NativeTable *table;

  WrapperUnion() : type(Wrapper_NONE), table(nullptr) {}
  WrapperUnion(WrapperUnion&& u):
    type(std::move(u.type)), table(std::move(u.table)) {}
  WrapperUnion(const WrapperUnion &);
  WrapperUnion &operator=(const WrapperUnion &);
  ~WrapperUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& value) {
    Reset();
    type = WrapperTraits<typename T::TableType>::enum_value;
    if (type != Wrapper_NONE) {
      table = new T(std::forward<T>(value));
    }
  }

  static flatbuffers::NativeTable *UnPack(const void *obj, Wrapper type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  Wrapper1T *AsWrapper1() {
    return type == Wrapper_Wrapper1 ?
      reinterpret_cast<Wrapper1T *>(table) : nullptr;
  }
  Wrapper2T *AsWrapper2() {
    return type == Wrapper_Wrapper2 ?
      reinterpret_cast<Wrapper2T *>(table) : nullptr;
  }
  Wrapper3T *AsWrapper3() {
    return type == Wrapper_Wrapper3 ?
      reinterpret_cast<Wrapper3T *>(table) : nullptr;
  }
};

bool VerifyWrapper(flatbuffers::Verifier &verifier, const void *obj, Wrapper type);
bool VerifyWrapperVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Object1T : public flatbuffers::NativeTable {
  typedef Object1 TableType;
  std::string text;
  bool boolean;
  Object1T()
      : boolean(false) {
  }
};

struct Object1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Object1T NativeTableType;
  enum {
    VT_TEXT = 4,
    VT_BOOLEAN = 6
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool boolean() const {
    return GetField<uint8_t>(VT_BOOLEAN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<uint8_t>(verifier, VT_BOOLEAN) &&
           verifier.EndTable();
  }
  Object1T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Object1T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Object1> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object1T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Object1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object1::VT_TEXT, text);
  }
  void add_boolean(bool boolean) {
    fbb_.AddElement<uint8_t>(Object1::VT_BOOLEAN, static_cast<uint8_t>(boolean), 0);
  }
  Object1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object1Builder &operator=(const Object1Builder &);
  flatbuffers::Offset<Object1> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Object1>(end);
    fbb_.Required(o, Object1::VT_TEXT);
    return o;
  }
};

inline flatbuffers::Offset<Object1> CreateObject1(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    bool boolean = false) {
  Object1Builder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_boolean(boolean);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object1> CreateObject1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    bool boolean = false) {
  return sample::CreateObject1(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      boolean);
}

flatbuffers::Offset<Object1> CreateObject1(flatbuffers::FlatBufferBuilder &_fbb, const Object1T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Object2T : public flatbuffers::NativeTable {
  typedef Object2 TableType;
  std::string text;
  int32_t integer;
  Object2T()
      : integer(0) {
  }
};

struct Object2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Object2T NativeTableType;
  enum {
    VT_TEXT = 4,
    VT_INTEGER = 6
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  int32_t integer() const {
    return GetField<int32_t>(VT_INTEGER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<int32_t>(verifier, VT_INTEGER) &&
           verifier.EndTable();
  }
  Object2T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Object2T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Object2> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object2T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Object2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object2::VT_TEXT, text);
  }
  void add_integer(int32_t integer) {
    fbb_.AddElement<int32_t>(Object2::VT_INTEGER, integer, 0);
  }
  Object2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object2Builder &operator=(const Object2Builder &);
  flatbuffers::Offset<Object2> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Object2>(end);
    fbb_.Required(o, Object2::VT_TEXT);
    return o;
  }
};

inline flatbuffers::Offset<Object2> CreateObject2(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    int32_t integer = 0) {
  Object2Builder builder_(_fbb);
  builder_.add_integer(integer);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object2> CreateObject2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    int32_t integer = 0) {
  return sample::CreateObject2(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      integer);
}

flatbuffers::Offset<Object2> CreateObject2(flatbuffers::FlatBufferBuilder &_fbb, const Object2T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Object3T : public flatbuffers::NativeTable {
  typedef Object3 TableType;
  std::string text;
  Object3T() {
  }
};

struct Object3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Object3T NativeTableType;
  enum {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           verifier.EndTable();
  }
  Object3T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Object3T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Object3> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object3T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Object3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object3::VT_TEXT, text);
  }
  Object3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object3Builder &operator=(const Object3Builder &);
  flatbuffers::Offset<Object3> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Object3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Object3> CreateObject3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  Object3Builder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object3> CreateObject3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  return sample::CreateObject3(
      _fbb,
      text ? _fbb.CreateString(text) : 0);
}

flatbuffers::Offset<Object3> CreateObject3(flatbuffers::FlatBufferBuilder &_fbb, const Object3T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Wrapper1T : public flatbuffers::NativeTable {
  typedef Wrapper1 TableType;
  ObjectUnion object;
  Wrapper1T() {
  }
};

struct Wrapper1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Wrapper1T NativeTableType;
  enum {
    VT_OBJECT_TYPE = 4,
    VT_OBJECT = 6
  };
  Object object_type() const {
    return static_cast<Object>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  const void *object() const {
    return GetPointer<const void *>(VT_OBJECT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_OBJECT) &&
           VerifyObject(verifier, object(), object_type()) &&
           verifier.EndTable();
  }
  Wrapper1T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Wrapper1T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Wrapper1> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper1T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Wrapper1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Object object_type) {
    fbb_.AddElement<uint8_t>(Wrapper1::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object(flatbuffers::Offset<void> object) {
    fbb_.AddOffset(Wrapper1::VT_OBJECT, object);
  }
  Wrapper1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Wrapper1Builder &operator=(const Wrapper1Builder &);
  flatbuffers::Offset<Wrapper1> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Wrapper1>(end);
    fbb_.Required(o, Wrapper1::VT_OBJECT);
    return o;
  }
};

inline flatbuffers::Offset<Wrapper1> CreateWrapper1(
    flatbuffers::FlatBufferBuilder &_fbb,
    Object object_type = Object_NONE,
    flatbuffers::Offset<void> object = 0) {
  Wrapper1Builder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<Wrapper1> CreateWrapper1(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper1T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Wrapper2T : public flatbuffers::NativeTable {
  typedef Wrapper2 TableType;
  std::string text;
  ObjectUnion object;
  Wrapper2T() {
  }
};

struct Wrapper2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Wrapper2T NativeTableType;
  enum {
    VT_TEXT = 4,
    VT_OBJECT_TYPE = 6,
    VT_OBJECT = 8
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  Object object_type() const {
    return static_cast<Object>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  const void *object() const {
    return GetPointer<const void *>(VT_OBJECT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_OBJECT) &&
           VerifyObject(verifier, object(), object_type()) &&
           verifier.EndTable();
  }
  Wrapper2T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Wrapper2T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Wrapper2> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper2T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Wrapper2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Wrapper2::VT_TEXT, text);
  }
  void add_object_type(Object object_type) {
    fbb_.AddElement<uint8_t>(Wrapper2::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object(flatbuffers::Offset<void> object) {
    fbb_.AddOffset(Wrapper2::VT_OBJECT, object);
  }
  Wrapper2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Wrapper2Builder &operator=(const Wrapper2Builder &);
  flatbuffers::Offset<Wrapper2> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Wrapper2>(end);
    fbb_.Required(o, Wrapper2::VT_TEXT);
    fbb_.Required(o, Wrapper2::VT_OBJECT);
    return o;
  }
};

inline flatbuffers::Offset<Wrapper2> CreateWrapper2(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    Object object_type = Object_NONE,
    flatbuffers::Offset<void> object = 0) {
  Wrapper2Builder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_text(text);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Wrapper2> CreateWrapper2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    Object object_type = Object_NONE,
    flatbuffers::Offset<void> object = 0) {
  return sample::CreateWrapper2(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      object_type,
      object);
}

flatbuffers::Offset<Wrapper2> CreateWrapper2(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper2T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Wrapper3T : public flatbuffers::NativeTable {
  typedef Wrapper3 TableType;
  ObjectUnion object;
  Wrapper3T() {
  }
};

struct Wrapper3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Wrapper3T NativeTableType;
  enum {
    VT_OBJECT_TYPE = 4,
    VT_OBJECT = 6
  };
  Object object_type() const {
    return static_cast<Object>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  const void *object() const {
    return GetPointer<const void *>(VT_OBJECT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_OBJECT) &&
           VerifyObject(verifier, object(), object_type()) &&
           verifier.EndTable();
  }
  Wrapper3T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Wrapper3T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Wrapper3> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper3T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Wrapper3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Object object_type) {
    fbb_.AddElement<uint8_t>(Wrapper3::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object(flatbuffers::Offset<void> object) {
    fbb_.AddOffset(Wrapper3::VT_OBJECT, object);
  }
  Wrapper3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Wrapper3Builder &operator=(const Wrapper3Builder &);
  flatbuffers::Offset<Wrapper3> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Wrapper3>(end);
    fbb_.Required(o, Wrapper3::VT_OBJECT);
    return o;
  }
};

inline flatbuffers::Offset<Wrapper3> CreateWrapper3(
    flatbuffers::FlatBufferBuilder &_fbb,
    Object object_type = Object_NONE,
    flatbuffers::Offset<void> object = 0) {
  Wrapper3Builder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<Wrapper3> CreateWrapper3(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper3T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SampleRootT : public flatbuffers::NativeTable {
  typedef SampleRoot TableType;
  WrapperUnion wrapper;
  SampleRootT() {
  }
};

struct SampleRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SampleRootT NativeTableType;
  enum {
    VT_WRAPPER_TYPE = 4,
    VT_WRAPPER = 6
  };
  Wrapper wrapper_type() const {
    return static_cast<Wrapper>(GetField<uint8_t>(VT_WRAPPER_TYPE, 0));
  }
  const void *wrapper() const {
    return GetPointer<const void *>(VT_WRAPPER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WRAPPER_TYPE) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_WRAPPER) &&
           VerifyWrapper(verifier, wrapper(), wrapper_type()) &&
           verifier.EndTable();
  }
  SampleRootT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SampleRootT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SampleRoot> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleRootT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SampleRootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wrapper_type(Wrapper wrapper_type) {
    fbb_.AddElement<uint8_t>(SampleRoot::VT_WRAPPER_TYPE, static_cast<uint8_t>(wrapper_type), 0);
  }
  void add_wrapper(flatbuffers::Offset<void> wrapper) {
    fbb_.AddOffset(SampleRoot::VT_WRAPPER, wrapper);
  }
  SampleRootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SampleRootBuilder &operator=(const SampleRootBuilder &);
  flatbuffers::Offset<SampleRoot> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<SampleRoot>(end);
    fbb_.Required(o, SampleRoot::VT_WRAPPER);
    return o;
  }
};

inline flatbuffers::Offset<SampleRoot> CreateSampleRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    Wrapper wrapper_type = Wrapper_NONE,
    flatbuffers::Offset<void> wrapper = 0) {
  SampleRootBuilder builder_(_fbb);
  builder_.add_wrapper(wrapper);
  builder_.add_wrapper_type(wrapper_type);
  return builder_.Finish();
}

flatbuffers::Offset<SampleRoot> CreateSampleRoot(flatbuffers::FlatBufferBuilder &_fbb, const SampleRootT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ResponseT : public flatbuffers::NativeTable {
  typedef Response TableType;
  int32_t status;
  std::string message;
  ResponseT()
      : status(0) {
  }
};

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseT NativeTableType;
  enum {
    VT_STATUS = 4,
    VT_MESSAGE = 6
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
  ResponseT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Response> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(Response::VT_STATUS, status, 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Response::VT_MESSAGE, message);
  }
  ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Response> CreateResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    const char *message = nullptr) {
  return sample::CreateResponse(
      _fbb,
      status,
      message ? _fbb.CreateString(message) : 0);
}

flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Object1T *Object1::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Object1T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Object1::UnPackTo(Object1T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); };
  { auto _e = boolean(); _o->boolean = _e; };
}

inline flatbuffers::Offset<Object1> Object1::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object1T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateObject1(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Object1> CreateObject1(flatbuffers::FlatBufferBuilder &_fbb, const Object1T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _text = _fbb.CreateString(_o->text);
  auto _boolean = _o->boolean;
  return sample::CreateObject1(
      _fbb,
      _text,
      _boolean);
}

inline Object2T *Object2::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Object2T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Object2::UnPackTo(Object2T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); };
  { auto _e = integer(); _o->integer = _e; };
}

inline flatbuffers::Offset<Object2> Object2::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object2T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateObject2(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Object2> CreateObject2(flatbuffers::FlatBufferBuilder &_fbb, const Object2T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _text = _fbb.CreateString(_o->text);
  auto _integer = _o->integer;
  return sample::CreateObject2(
      _fbb,
      _text,
      _integer);
}

inline Object3T *Object3::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Object3T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Object3::UnPackTo(Object3T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); };
}

inline flatbuffers::Offset<Object3> Object3::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Object3T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateObject3(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Object3> CreateObject3(flatbuffers::FlatBufferBuilder &_fbb, const Object3T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _text = _o->text.size() ? _fbb.CreateString(_o->text) : 0;
  return sample::CreateObject3(
      _fbb,
      _text);
}

inline Wrapper1T *Wrapper1::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Wrapper1T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Wrapper1::UnPackTo(Wrapper1T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object.type = _e; };
  { auto _e = object(); if (_e) _o->object.table = ObjectUnion::UnPack(_e, object_type(),_resolver); };
}

inline flatbuffers::Offset<Wrapper1> Wrapper1::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper1T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWrapper1(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Wrapper1> CreateWrapper1(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper1T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _object_type = _o->object.type;
  auto _object = _o->object.Pack(_fbb);
  return sample::CreateWrapper1(
      _fbb,
      _object_type,
      _object);
}

inline Wrapper2T *Wrapper2::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Wrapper2T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Wrapper2::UnPackTo(Wrapper2T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); };
  { auto _e = object_type(); _o->object.type = _e; };
  { auto _e = object(); if (_e) _o->object.table = ObjectUnion::UnPack(_e, object_type(),_resolver); };
}

inline flatbuffers::Offset<Wrapper2> Wrapper2::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper2T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWrapper2(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Wrapper2> CreateWrapper2(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper2T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _text = _fbb.CreateString(_o->text);
  auto _object_type = _o->object.type;
  auto _object = _o->object.Pack(_fbb);
  return sample::CreateWrapper2(
      _fbb,
      _text,
      _object_type,
      _object);
}

inline Wrapper3T *Wrapper3::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new Wrapper3T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Wrapper3::UnPackTo(Wrapper3T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object.type = _e; };
  { auto _e = object(); if (_e) _o->object.table = ObjectUnion::UnPack(_e, object_type(),_resolver); };
}

inline flatbuffers::Offset<Wrapper3> Wrapper3::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper3T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWrapper3(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Wrapper3> CreateWrapper3(flatbuffers::FlatBufferBuilder &_fbb, const Wrapper3T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _object_type = _o->object.type;
  auto _object = _o->object.Pack(_fbb);
  return sample::CreateWrapper3(
      _fbb,
      _object_type,
      _object);
}

inline SampleRootT *SampleRoot::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new SampleRootT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void SampleRoot::UnPackTo(SampleRootT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wrapper_type(); _o->wrapper.type = _e; };
  { auto _e = wrapper(); if (_e) _o->wrapper.table = WrapperUnion::UnPack(_e, wrapper_type(),_resolver); };
}

inline flatbuffers::Offset<SampleRoot> SampleRoot::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleRootT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSampleRoot(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SampleRoot> CreateSampleRoot(flatbuffers::FlatBufferBuilder &_fbb, const SampleRootT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _wrapper_type = _o->wrapper.type;
  auto _wrapper = _o->wrapper.Pack(_fbb);
  return sample::CreateSampleRoot(
      _fbb,
      _wrapper_type,
      _wrapper);
}

inline ResponseT *Response::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ResponseT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Response::UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = status(); _o->status = _e; };
  { auto _e = message(); if (_e) _o->message = _e->str(); };
}

inline flatbuffers::Offset<Response> Response::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateResponse(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _status = _o->status;
  auto _message = _o->message.size() ? _fbb.CreateString(_o->message) : 0;
  return sample::CreateResponse(
      _fbb,
      _status,
      _message);
}

inline bool VerifyObject(flatbuffers::Verifier &verifier, const void *obj, Object type) {
  switch (type) {
    case Object_NONE: {
      return true;
    }
    case Object_Object1: {
      auto ptr = reinterpret_cast<const Object1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Object_Object2: {
      auto ptr = reinterpret_cast<const Object2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Object_Object3: {
      auto ptr = reinterpret_cast<const Object3 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyObjectVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyObject(
        verifier,  values->Get(i), types->GetEnum<Object>(i))) {
      return false;
    }
  }
  return true;
}

inline flatbuffers::NativeTable *ObjectUnion::UnPack(const void *obj, Object type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case Object_Object1: {
      auto ptr = reinterpret_cast<const Object1 *>(obj);
      return ptr->UnPack(resolver);
    }
    case Object_Object2: {
      auto ptr = reinterpret_cast<const Object2 *>(obj);
      return ptr->UnPack(resolver);
    }
    case Object_Object3: {
      auto ptr = reinterpret_cast<const Object3 *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> ObjectUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case Object_Object1: {
      auto ptr = reinterpret_cast<const Object1T *>(table);
      return CreateObject1(_fbb, ptr, _rehasher).Union();
    }
    case Object_Object2: {
      auto ptr = reinterpret_cast<const Object2T *>(table);
      return CreateObject2(_fbb, ptr, _rehasher).Union();
    }
    case Object_Object3: {
      auto ptr = reinterpret_cast<const Object3T *>(table);
      return CreateObject3(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline void ObjectUnion::Reset() {
  switch (type) {
    case Object_Object1: {
      auto ptr = reinterpret_cast<Object1T *>(table);
      delete ptr;
      break;
    }
    case Object_Object2: {
      auto ptr = reinterpret_cast<Object2T *>(table);
      delete ptr;
      break;
    }
    case Object_Object3: {
      auto ptr = reinterpret_cast<Object3T *>(table);
      delete ptr;
      break;
    }
    default: break;
  }
  table = nullptr;
  type = Object_NONE;
}

inline bool VerifyWrapper(flatbuffers::Verifier &verifier, const void *obj, Wrapper type) {
  switch (type) {
    case Wrapper_NONE: {
      return true;
    }
    case Wrapper_Wrapper1: {
      auto ptr = reinterpret_cast<const Wrapper1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Wrapper_Wrapper2: {
      auto ptr = reinterpret_cast<const Wrapper2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Wrapper_Wrapper3: {
      auto ptr = reinterpret_cast<const Wrapper3 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyWrapperVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyWrapper(
        verifier,  values->Get(i), types->GetEnum<Wrapper>(i))) {
      return false;
    }
  }
  return true;
}

inline flatbuffers::NativeTable *WrapperUnion::UnPack(const void *obj, Wrapper type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case Wrapper_Wrapper1: {
      auto ptr = reinterpret_cast<const Wrapper1 *>(obj);
      return ptr->UnPack(resolver);
    }
    case Wrapper_Wrapper2: {
      auto ptr = reinterpret_cast<const Wrapper2 *>(obj);
      return ptr->UnPack(resolver);
    }
    case Wrapper_Wrapper3: {
      auto ptr = reinterpret_cast<const Wrapper3 *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> WrapperUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case Wrapper_Wrapper1: {
      auto ptr = reinterpret_cast<const Wrapper1T *>(table);
      return CreateWrapper1(_fbb, ptr, _rehasher).Union();
    }
    case Wrapper_Wrapper2: {
      auto ptr = reinterpret_cast<const Wrapper2T *>(table);
      return CreateWrapper2(_fbb, ptr, _rehasher).Union();
    }
    case Wrapper_Wrapper3: {
      auto ptr = reinterpret_cast<const Wrapper3T *>(table);
      return CreateWrapper3(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline void WrapperUnion::Reset() {
  switch (type) {
    case Wrapper_Wrapper1: {
      auto ptr = reinterpret_cast<Wrapper1T *>(table);
      delete ptr;
      break;
    }
    case Wrapper_Wrapper2: {
      auto ptr = reinterpret_cast<Wrapper2T *>(table);
      delete ptr;
      break;
    }
    case Wrapper_Wrapper3: {
      auto ptr = reinterpret_cast<Wrapper3T *>(table);
      delete ptr;
      break;
    }
    default: break;
  }
  table = nullptr;
  type = Wrapper_NONE;
}

inline const sample::SampleRoot *GetSampleRoot(const void *buf) {
  return flatbuffers::GetRoot<sample::SampleRoot>(buf);
}

inline bool VerifySampleRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sample::SampleRoot>(nullptr);
}

inline void FinishSampleRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<sample::SampleRoot> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<SampleRootT> UnPackSampleRoot(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<SampleRootT>(GetSampleRoot(buf)->UnPack(res));
}

}  // namespace sample

#endif  // FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
