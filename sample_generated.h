// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace sample {

struct Object1;

struct Object2;

struct Object3;

struct SampleRoot;

enum Object {
  Object_NONE = 0,
  Object_Object1 = 1,
  Object_Object2 = 2,
  Object_Object3 = 3,
  Object_MIN = Object_NONE,
  Object_MAX = Object_Object3
};

inline const char **EnumNamesObject() {
  static const char *names[] = {
    "NONE",
    "Object1",
    "Object2",
    "Object3",
    nullptr
  };
  return names;
}

inline const char *EnumNameObject(Object e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesObject()[index];
}

template<typename T> struct ObjectTraits {
  static const Object enum_value = Object_NONE;
};

template<> struct ObjectTraits<Object1> {
  static const Object enum_value = Object_Object1;
};

template<> struct ObjectTraits<Object2> {
  static const Object enum_value = Object_Object2;
};

template<> struct ObjectTraits<Object3> {
  static const Object enum_value = Object_Object3;
};

bool VerifyObject(flatbuffers::Verifier &verifier, const void *obj, Object type);
bool VerifyObjectVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Object1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEXT = 4,
    VT_BOOLEAN = 6
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool boolean() const {
    return GetField<uint8_t>(VT_BOOLEAN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<uint8_t>(verifier, VT_BOOLEAN) &&
           verifier.EndTable();
  }
};

struct Object1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object1::VT_TEXT, text);
  }
  void add_boolean(bool boolean) {
    fbb_.AddElement<uint8_t>(Object1::VT_BOOLEAN, static_cast<uint8_t>(boolean), 0);
  }
  Object1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object1Builder &operator=(const Object1Builder &);
  flatbuffers::Offset<Object1> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Object1>(end);
    fbb_.Required(o, Object1::VT_TEXT);
    return o;
  }
};

inline flatbuffers::Offset<Object1> CreateObject1(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    bool boolean = false) {
  Object1Builder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_boolean(boolean);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object1> CreateObject1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    bool boolean = false) {
  return sample::CreateObject1(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      boolean);
}

struct Object2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEXT = 4,
    VT_INTEGER = 6
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  int32_t integer() const {
    return GetField<int32_t>(VT_INTEGER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<int32_t>(verifier, VT_INTEGER) &&
           verifier.EndTable();
  }
};

struct Object2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object2::VT_TEXT, text);
  }
  void add_integer(int32_t integer) {
    fbb_.AddElement<int32_t>(Object2::VT_INTEGER, integer, 0);
  }
  Object2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object2Builder &operator=(const Object2Builder &);
  flatbuffers::Offset<Object2> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Object2>(end);
    fbb_.Required(o, Object2::VT_TEXT);
    return o;
  }
};

inline flatbuffers::Offset<Object2> CreateObject2(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    int32_t integer = 0) {
  Object2Builder builder_(_fbb);
  builder_.add_integer(integer);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object2> CreateObject2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    int32_t integer = 0) {
  return sample::CreateObject2(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      integer);
}

struct Object3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEXT = 4,
    VT_MESSAGE = 6
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TEXT) &&
           verifier.Verify(text()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
};

struct Object3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Object3::VT_TEXT, text);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Object3::VT_MESSAGE, message);
  }
  Object3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Object3Builder &operator=(const Object3Builder &);
  flatbuffers::Offset<Object3> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Object3>(end);
    fbb_.Required(o, Object3::VT_TEXT);
    return o;
  }
};

inline flatbuffers::Offset<Object3> CreateObject3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  Object3Builder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object3> CreateObject3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    const char *message = nullptr) {
  return sample::CreateObject3(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      message ? _fbb.CreateString(message) : 0);
}

struct SampleRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_OBJECTS_TYPE = 4,
    VT_OBJECTS = 6
  };
  const flatbuffers::Vector<uint8_t> *objects_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_OBJECTS_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *objects() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_OBJECTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OBJECTS_TYPE) &&
           verifier.Verify(objects_type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OBJECTS) &&
           verifier.Verify(objects()) &&
           VerifyObjectVector(verifier, objects(), objects_type()) &&
           verifier.EndTable();
  }
};

struct SampleRootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_objects_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> objects_type) {
    fbb_.AddOffset(SampleRoot::VT_OBJECTS_TYPE, objects_type);
  }
  void add_objects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> objects) {
    fbb_.AddOffset(SampleRoot::VT_OBJECTS, objects);
  }
  SampleRootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SampleRootBuilder &operator=(const SampleRootBuilder &);
  flatbuffers::Offset<SampleRoot> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<SampleRoot>(end);
    return o;
  }
};

inline flatbuffers::Offset<SampleRoot> CreateSampleRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> objects_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> objects = 0) {
  SampleRootBuilder builder_(_fbb);
  builder_.add_objects(objects);
  builder_.add_objects_type(objects_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<SampleRoot> CreateSampleRootDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *objects_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *objects = nullptr) {
  return sample::CreateSampleRoot(
      _fbb,
      objects_type ? _fbb.CreateVector<uint8_t>(*objects_type) : 0,
      objects ? _fbb.CreateVector<flatbuffers::Offset<void>>(*objects) : 0);
}

inline bool VerifyObject(flatbuffers::Verifier &verifier, const void *obj, Object type) {
  switch (type) {
    case Object_NONE: {
      return true;
    }
    case Object_Object1: {
      auto ptr = reinterpret_cast<const Object1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Object_Object2: {
      auto ptr = reinterpret_cast<const Object2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Object_Object3: {
      auto ptr = reinterpret_cast<const Object3 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyObjectVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyObject(
        verifier,  values->Get(i), types->GetEnum<Object>(i))) {
      return false;
    }
  }
  return true;
}

inline const sample::SampleRoot *GetSampleRoot(const void *buf) {
  return flatbuffers::GetRoot<sample::SampleRoot>(buf);
}

inline bool VerifySampleRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sample::SampleRoot>(nullptr);
}

inline void FinishSampleRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<sample::SampleRoot> root) {
  fbb.Finish(root);
}

}  // namespace sample

#endif  // FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
